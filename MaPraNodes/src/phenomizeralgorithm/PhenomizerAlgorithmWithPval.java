package phenomizeralgorithm;

import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedList;

import io.FileInputReader;

public class PhenomizerAlgorithmWithPval extends PhenomizerAlgorithm {
	
	private PValueFolder folder;
	private PValueCorrector corrector;
	
	/**
	 * creates a PhenomizerAlgorithmWithPval object
	 * runs the PhenomizerAlgorithm and calculates pvalues from pre-determined score distributions
	 * @param num: number of diseases in the output of Phenomizer
	 * @param ontology: Ontology object representing is-a relationship between PhenoDis symptoms
	 * @param queryIds: contains PhenoDis ids of the query symptoms
	 * @param sda: associations between diseases and symptoms annotated in PhenoDis
	 * @param similarityCalculator: calculates the similarity score between a query and a disease
	 * @param folder: PValueFolder object for managing access to the pre-determined score distributions
	 * @param corrector: PValue corrector object
	 */
	public PhenomizerAlgorithmWithPval(int num, Ontology ontology, LinkedList<Integer> queryIds,
			SymptomDiseaseAssociations sda, SimilarityCalculator similarityCalculator, PValueFolder folder,
			PValueCorrector corrector) {
		
		super(num, ontology, queryIds, sda, similarityCalculator);
		this.folder=folder;
		this.corrector = corrector;
	}

	@Override
	/**
	 * executes the Phenomizer algorithm
	 */
	public LinkedList<String[]> runPhenomizer() {
		
		//calculate IC
		setIC();
		//get similarity scores for all diseases
		HashMap<Integer,Double> resPhenomizer = scoreQuery();
		
		//calculate and correct pvalues + keep sorting order
		String pvalue_file = folder.getPvalFile(queryIds.size());
		String[][] array_result = getPvalues(resPhenomizer, pvalue_file);
		correctPvalues(array_result);
		
		//generate output data structure with defined number of entries
		return getResult(array_result);
	}
	
	/**
	 * calculates the similariy between the query and all diseases in PhenoDis
	 * the similarity scores are rounded to 3 decimal places and stored in a HashMap
	 * @return HashMap with mapping PhenoDis disease id-> similarity score of the disease and the query
	 */
	private HashMap<Integer,Double> scoreQuery(){
		
		HashMap<Integer,Double> result = new HashMap<Integer,Double>(sda.numberOfDiseases()*3);
		for(int disease : sda.getDiseases()){
			double similarity = similarityCalculator.calculateSymmetricSimilarity(queryIds,sda.getSymptoms(disease));
			//round score to 3 decimal places
			similarity = (double) Math.round(similarity*1000)/1000;
			result.put(disease,similarity);
		}
		
		return result;
	}
	
	/**
	 * calculates the pvalues for similarity scores according to pre-determined score distributions
	 * @param scores: Hashmap that maps a disease id to a similarity score
	 * @param path: path to the file containing the score distribution for the appropriate query size
	 * 	the file is generated by a ScoreDistributionSampling object
	 * @return: 2d array with pvalues
	 * 	each row corresponds to a disease in PhenoDis
	 * 	columns: array[][0] disease id, array[][1] similariy score, array[][2] pvalue
	 */
	private String[][] getPvalues(HashMap<Integer,Double> scores, String path){
		
		//phenoResult[][0]: disease id	phenoResult[][1]: score	phenoResult[][3]: pvalue
		String[][] phenoResult = new String[scores.size()][3];
		
		//read line-wise score distribution file, each line contains the distribution for one disease
		FileInputReader fir = new FileInputReader(path);
		String line ="";
		int pos=0;
		
		while((line=fir.read())!=null){
			String [] counts = line.split("\t");
			
			//get disease id: 1st column
			String disease_id = counts[0];
			
			//get score for disease
			double disease_score = scores.get(Integer.valueOf(disease_id));
			
			//calculate pvalue
			int index = (int) Math.round(disease_score*1000)+1;
			int score_count=0;
			if(index<counts.length){
				score_count=Integer.valueOf(counts[index]);
			}
			int total_count = Integer.valueOf(counts[1]);
			double disease_pval = (double) score_count/ total_count;
			
			//save results in String array phenoResult
			phenoResult[pos][0]=disease_id;
			phenoResult[pos][1]=String.valueOf(disease_score);
			phenoResult[pos][2]=String.valueOf(disease_pval);
			pos++;
		}
		
		fir.closer();
		
		//sort result according to pvalue, score and disease id
		Arrays.sort(phenoResult, new ComparatorPhenoPval());
		
		return phenoResult;
	}
	
	/**
	 * corrects the pvalues stored in column 2 of the 2d array results, the old pvalues are overwritten
	 * @param results: 2d array 
	 * 	each row corresponds to a disease in PhenoDis
	 * 	columns: array[][0] disease id, array[][1] similariy score, array[][2] pvalue
	 */
	private void correctPvalues (String [][] results){
		
		//copy pvalues from results into new array
		double [] pvals = new double[results.length];
		//current position in pvals array
		int pos=0;
		//iterate over all diseases in result
		for(String[] r : results){
			pvals[pos]=Double.valueOf(r[2]);
			pos++;
		}
		
		//correct pvalues
		double [] corrected_pvals = corrector.correctPVals(pvals,sda.numberOfDiseases());
		
		//replace pvalues in results with the corrected pvalues to the result
		pos=0;
		for(String[] r : results){
			r[2]=String.valueOf(corrected_pvals[pos]);
			pos++;
		}
		
		Arrays.sort(results, new ComparatorPhenoPval());
	}
	
	/**
	 * transforms the 2d array into the standard output data structure of PhenomizerAlgorithm and 
	 * reduces the number of diseases in the output to a fixed number
	 * @param scores_pvals: 2d array 
	 * 	each row corresponds to a disease in PhenoDis
	 * 	columns: array[][0] disease id, array[][1] similariy score, array[][2] pvalue
	 * @return: a list of String arrays with a fixed length
	 * 	array[0] disease id, array[1] similariy score, array[2] pvalue
	 */
	private LinkedList<String[]> getResult(String [][] scores_pvals){
		LinkedList<String[]> res = new LinkedList<String[]>();
		
		//num: output size, cannot be larger than the total number of diseases
		if(num>scores_pvals.length){
			num=scores_pvals.length;
		}
		
		//generate output of desired size num
		for(int i=0; i<num; i++){
			res.add(scores_pvals[i]);
		}
		
		//add additional results if they have the same pvalue and the same score as the last result (num-th result)
		String last_score = scores_pvals[num-1][1];
		String last_pval = scores_pvals[num-1][2];
		int pos=num;
		while(pos < scores_pvals.length &&
			scores_pvals[pos][2].equals(last_pval) && scores_pvals[pos][1].equals(last_score)){
			
			res.add(scores_pvals[pos]);
			pos++;
		}
		
		return res;
	}
	
}
